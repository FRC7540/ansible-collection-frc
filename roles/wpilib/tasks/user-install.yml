- name: Install wpilib for each user
  become: true
  become_user: "{{ user }}"
  block:
    - name: Create wpilib directory
      ansible.builtin.file:
        path: "/home/{{ user }}/wpilib/{{ wpilib_release_version | split('.') | first }}"
        state: directory
        recurse: true
        owner: "{{ user }}"
        group: "{{ user }}"
      register: wpilib_home

    - name: Check installed version
      ansible.builtin.shell:
        cmd: "jq '.wpilibExtension.version' {{ wpilib_home.path }}/installUtils/vscodeConfig.json | xargs echo"
      register: installed_wpilib_version
      changed_when: installed_wpilib_version.stdout != wpilib_release_version

    - name: Install wpilib
      ansible.builtin.unarchive:
        src: "{{ wpilib_install_root }}/{{ wpilib_artifacts_archive }}"
        dest: "{{ wpilib_home.path }}"
        owner: "{{ user }}"
        group: "{{ user }}"
        remote_src: True
      when: installed_wpilib_version.stdout != wpilib_release_version

    - name: Create necessary directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        recurse: true
        owner: "{{ user }}"
        group: "{{ user }}"
      loop:
        - "{{ wpilib_home.path }}/vscode/data/extensions"
        - "{{ wpilib_home.path }}/vscode/data/user-data/User"
        - "/home/{{ user }}/.local/share/applications"
        - "/home/{{ user }}/Desktop"

    - name: Install wpilib extensions
      frc7540.frc.wpilib_extensions:
        path: "{{ wpilib_home.path }}"

    - name: Render FRC vscode settings
      ansible.builtin.template:
        src: settings.json.j2
        dest: "{{ wpilib_home.path }}/vscode/data/user-data/User/settings.json"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "0664"

    - name: Render frc vscode shortcut
      ansible.builtin.template:
        src: frccode.desktop.j2
        dest: "/home/{{ user }}/.local/share/applications/frccode.desktop"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "0775"

    - name: Check if shortcut is trusted
      ansible.builtin.shell:
        cmd: "dbus-launch gio info /home/{{ user }}/.local/share/applications/frccode.desktop | grep metadata::trusted | xargs echo | cut -d ' ' -f 2"
      register: shortcut_trusted
      changed_when: shortcut_trusted.stdout != "true"

    - name: Make shortcut trusted
      ansible.builtin.shell:
        cmd: "dbus-launch gio set /home/{{ user }}/.local/share/applications/frccode.desktop metadata::trusted true"
      when: shortcut_trusted.stdout != "true"

    - name: Create desktop shortcut link
      ansible.builtin.file:
        src: "/home/{{ user }}/.local/share/applications/frccode.desktop"
        path: "/home/{{ user }}/Desktop/frccode.desktop"
        state: link
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "0775"

    - name: Slurp install configuration
      ansible.builtin.slurp:
        src: "{{ wpilib_home.path }}/installUtils/fullConfig.json"
      register: full_config_data

    - name: Set Gradle Facts
      ansible.builtin.set_fact:
        full_config: "{{ full_config_data.content | b64decode | from_json }}"

    - name: Create Gradle installation directories
      ansible.builtin.file:
        path: "/home/{{ user }}/{{ item }}/{{ (full_config.Gradle.ZipName | splitext)[0] }}/{{ full_config.Gradle.Hash }}"
        state: directory
        recurse: true
        owner: "{{ user }}"
        group: "{{ user }}"
      loop: "{{ gradle_install_dirs }}"
      register: gradle_install_paths

    - name: Save a copy of the Gradle archive
      ansible.builtin.copy:
        src: "{{ wpilib_home.path }}/installUtils/{{ full_config.Gradle.ZipName }}"
        dest: "{{ item }}/{{ full_config.Gradle.ZipName }}"
        remote_src: yes
      loop: "{{ gradle_install_paths.results | map(attribute='path') }}"

    - name: Install Gradle archives
      ansible.builtin.unarchive:
        src: "{{ item }}/{{ full_config.Gradle.ZipName }}"
        dest: "{{ item }}"
        remote_src: yes
      loop: "{{ gradle_install_paths.results | map(attribute='path') }}"

    - name: Create Gradle lck files
      ansible.builtin.copy:
        content: ""
        dest: "{{ item }}/{{ full_config.Gradle.ZipName }}.lck"
      loop: "{{ gradle_install_paths.results | map(attribute='path') }}"

    - name: Create Gradle ok files
      ansible.builtin.copy:
        content: ""
        dest: "{{ item }}/{{ full_config.Gradle.ZipName }}.ok"
      loop: "{{ gradle_install_paths.results | map(attribute='path') }}"
