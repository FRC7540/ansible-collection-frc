- name: Install wpilib for each user
  become: true
  become_user: "{{ user }}"
  block:
    - name: Make sure the folder for the selected wpilib version year already exists
      ansible.builtin.file:
        path: "/home/{{ user }}/wpilib/{{ wpilib_release_version | split('.') | first }}"
        state: directory
        recurse: true
      register: wpilib_home

    - name: Check if the selected wpilib version is already installed
      ansible.builtin.shell:
        cmd: "jq '.wpilibExtension.version' {{ wpilib_home.path }}/installUtils/vscodeConfig.json | xargs echo"
      register: installed_wpilib_version
      changed_when: installed_wpilib_version.stdout != wpilib_release_version

    - name: Unpack the selected wpilib archive
      ansible.builtin.unarchive:
        src: "{{ wpilib_install_root }}/{{ wpilib_artifacts_archive }}"
        dest: "{{ wpilib_home.path }}"
        exclude:
          - "installUtils/{{ full_config.Gradle.ZipName }}"
          - "jdk"
        remote_src: True
      when: installed_wpilib_version.stdout != wpilib_release_version

    - name: Create necessary directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        recurse: true
      loop:
        - "{{ wpilib_home.path }}/vscode/data/extensions"
        - "{{ wpilib_home.path }}/vscode/data/user-data/User"
        - "/home/{{ user }}/.local/share/applications"
        - "/home/{{ user }}/.local/share/pixmaps"
        - "/home/{{ user }}/Desktop"

    - name: Install wpilib extensions
      frc7540.frc.wpilib_extensions:
        path: "{{ wpilib_home.path }}"

    - name: Add shortcut icon
      ansible.builtin.copy:
        src: shuffleboard.png
        dest: "/home/{{ user }}/.local/share/pixmaps/shuffleboard.png"

    - name: Render FRC vscode settings
      ansible.builtin.template:
        src: settings.json.j2
        dest: "{{ wpilib_home.path }}/vscode/data/user-data/User/settings.json"

    - name: Render shortcuts
      ansible.builtin.template:
        src: "{{ item }}.desktop.j2"
        dest: "/home/{{ user }}/.local/share/applications/{{ item }}.desktop"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "0775"
      loop: "{{ shortcuts }}"
      register: shortcut_files

    - name: Check if shortcuts are trusted
      ansible.builtin.shell:
        cmd: "dbus-launch gio info {{ item }} | grep metadata::trusted | xargs echo | cut -d ' ' -f 2"
      register: shortcut_files_trusted
      changed_when: false
      loop: "{{ shortcut_files.results | map(attribute='dest') }}"

    - name: Make shortcuts trusted
      ansible.builtin.shell:
        cmd: "dbus-launch gio set {{ item.item }} metadata::trusted true"
      when: item.stdout != "true"
      loop: "{{ shortcut_files_trusted.results }}"

    - name: Create desktop shortcut link
      ansible.builtin.file:
        src: "/home/{{ user }}/.local/share/applications/{{ item }}.desktop"
        path: "/home/{{ user }}/Desktop/{{ item }}.desktop"
        state: link
        mode: "0775"
      loop: "{{ shortcuts }}"

    - name: Create directories for the included gradle wrapper distribution
      ansible.builtin.file:
        path: "/home/{{ user }}/{{ item }}/{{ (full_config.Gradle.ZipName | splitext)[0] }}/{{ full_config.Gradle.Hash }}"
        state: directory
        recurse: true
      loop: "{{ gradle_install_dirs }}"
      register: gradle_install_paths

    - name: Create the link to the global gradle install
      ansible.builtin.file:
        src: "{{ gradle_install_root }}/gradle-{{ gradle_version }}"
        dest: "{{ item }}/gradle-{{ gradle_version }}"
        state: link
      loop: "{{ gradle_install_paths.results | map(attribute='path') }}"

    - name: Create the link to the global gradle zip
      ansible.builtin.file:
        src: "{{ wpilib_install_root }}/{{ wpilib_base }}/installUtils/{{ full_config.Gradle.ZipName }}"
        dest: "{{ item }}/{{ full_config.Gradle.ZipName }}"
        state: link
      loop: "{{ gradle_install_paths.results | map(attribute='path') }}"

    - name: Create Gradle lck files
      ansible.builtin.copy:
        content: ""
        dest: "{{ item }}/{{ full_config.Gradle.ZipName }}.lck"
      loop: "{{ gradle_install_paths.results | map(attribute='path') }}"

    - name: Create Gradle ok files
      ansible.builtin.copy:
        content: ""
        dest: "{{ item }}/{{ full_config.Gradle.ZipName }}.ok"
      loop: "{{ gradle_install_paths.results | map(attribute='path') }}"
